{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","kryptoBird","state","contract","methods","send","from","account","once","receipt","setState","kryptoBirdz","concat","toConsumableArray","KryptoBird","totalSupply","loadWeb3","loadBlockchainData","detectEthereumProvider","console","log","web3","Web3","window","ethereum","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","abi","address","Contract","i","alert","_this2","react_default","a","createElement","className","style","color","role","opacity","onSubmit","event","preventDefault","value","type","placeholder","ref","input","margin","map","key","mdb_react_ui_kit_esm","maxWidth","src","position","heigh","marginRight","href","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13b43bf8.chunk.js","sourcesContent":["import React, { Component } from \"react\"; \r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBird from '../abis/Kryptobird.json'; \r\nimport {MDBCard, MDBCardBody, MDBCardTitle, \r\n    MDBCardText, MDBCardImage,MDBBtn} from 'mdb-react-ui-kit';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    async componentDidMount() {\r\n        await this.loadWeb3();\r\n        await this.loadBlockchainData();\r\n    }\r\n    \r\n    async loadWeb3(){\r\n        // first up is to detect ethereum provider (metamask)\r\n        const provider = await detectEthereumProvider();\r\n\r\n        if(provider) {\r\n            console.log('ethereum wallet is connected')\r\n            // From now on, this should always be true:\r\n            // provider === window.ethereum\r\n\r\n            // Legacy providers may only have ethereum.sendAsync\r\n            /*const chainId = await provider.request({\r\n                method: 'eth_chainId'\r\n            })*/\r\n        } else {\r\n            // no ethereum provider \r\n            console.log('no ehtereum wallet detected')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = new Web3(window.ethereum)\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n\r\n       \r\n        \r\n        // get networkId\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = KryptoBird.networks[networkId]\r\n        if(networkData) {\r\n            const abi = KryptoBird.abi; \r\n            const address = networkData.address; \r\n            const contract = new web3.eth.Contract(abi, address)\r\n            this.setState({contract})\r\n\r\n            // call the total supply of our Krypto Birdz\r\n            const totalSupply = await contract.methods.totalSupply().call()\r\n            this.setState({totalSupply}) \r\n\r\n            // set up an array to keep track of tokens\r\n            for(let i = 1; i <= totalSupply; i++) {\r\n                const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\r\n                this.setState({\r\n                    kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n                })\r\n            }\r\n\r\n        } else {\r\n            window.alert('Smart contract not deployed')\r\n        }\r\n    }\r\n\r\n    mint = (kryptoBird) => {\r\n        this.state.contract.methods.mint(kryptoBird).send({from:this.state.account})\r\n        .once('receipt', (receipt) => {\r\n            this.setState({\r\n                kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n            })\r\n        })\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            contract: null,\r\n            totalSupply:0,\r\n            kryptoBirdz:[]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container-filled\">\r\n                <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n                    <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\" style={{color:'white'}}>\r\n                        Krypto Birdz NFTs (Non Fungible Tokens)\r\n                    </div>\r\n                    <ul className=\"navbar- nav px-3\">\r\n                        <li className=\"nacv-item text-nowrap d-none d-sm-none d-sm-block\">\r\n                            <small className=\"text-white\">\r\n                                {this.state.account}\r\n                            </small>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n\r\n                <div className='container-fluid mt-1'>\r\n                    <div className='row'>\r\n                        <main role='main' className=\"col-lg-12 d-flex text-center\">\r\n                            <div className='content mr-auto ml-auto' style={{opacity:'0.8'}}>\r\n                                <h1 style={{color:'white'}}>\r\n                                    kryptoBirdz - NFT Marketplace\r\n                                </h1>\r\n\r\n                                <form onSubmit={(event) => {\r\n                                    event.preventDefault()\r\n                                    const kryptoBird = this.kryptoBird.value\r\n                                    this.mint(kryptoBird)\r\n                                }}>\r\n                                    <input type='text' placeholder='Add a file location' className='form-control mb-1'\r\n                                    ref={(input) => this.kryptoBird = input}/>\r\n                                    <input style={{margin:'6px'}} type='submit' className='btn btn-primary btn-black' value='MINT' />\r\n                                </form>\r\n\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                            <hr></hr>\r\n                            <div className=\"row textCenter\">\r\n                                {this.state.kryptoBirdz.map((kryptoBird, key) => {\r\n                                    return(\r\n                                        <div >\r\n                                            <div>\r\n                                                <MDBCard className=\"token img\" style={{maxWidth:'22rem'}}>\r\n                                                    <MDBCardImage src={kryptoBird} position='top' heigh='250rem' style={{marginRight:'4px'}} />\r\n                                                    <MDBCardBody>\r\n                                                        <MDBCardTitle> kryptoBirdz </MDBCardTitle>\r\n                                                        <MDBCardText> This is one of 20 funtokens. Especialy made for friends to flex.</MDBCardText>\r\n                                                        <MDBBtn href={kryptoBird}>Download</MDBBtn>\r\n                                                    </MDBCardBody>\r\n                                                </MDBCard>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                                \r\n                            </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}