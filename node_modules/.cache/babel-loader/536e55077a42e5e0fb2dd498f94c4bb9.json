{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/Kryptobird.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  console.log('ethereum wallet is connected'); // From now on, this should always be true:\n                  // provider === window.ethereum\n                  // Legacy providers may only have ethereum.sendAsync\n\n                  /*const chainId = await provider.request({\r\n                      method: 'eth_chainId'\r\n                  })*/\n                } else {\n                  // no ethereum provider \n                  console.log('no ehtereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = new Web3(window.ethereum); // const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n                _context3.next = 3;\n                return web3.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                }); // get networkId\n                // const networkId = await window.ethereum.networkVersion\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                console.log(networkId);\n                networkData = KryptoBird.networks[networkId];\n                console.log(networkData);\n\n                if (networkData) {\n                  abi = KryptoBird.abi;\n                  address = networkData.address;\n                  contract = new web3.eth.Contract(abi, address);\n                  console.log(contract);\n                }\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '',\n      contract: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Krypto Birdz NFTs (Non Fungible Tokens)\"), React.createElement(\"ul\", {\n        className: \"navbar- nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nacv-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, this.state.account)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Tino\\Desktop\\workspace\\nft-marketplace-starter-kit\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App","loadWeb3","loadBlockchainData","provider","console","log","web3","window","ethereum","getAccounts","accounts","setState","account","eth","net","getId","networkId","networkData","networks","abi","address","contract","Contract","props","state","color"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;IAGMC,G;;;;;;;;;;;;;;;;uBAGQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAKiBJ,sBAAsB,E;;;AAAvCK,gBAAAA,Q;;AAEN,oBAAGA,QAAH,EAAa;AACTC,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EADS,CAET;AACA;AAEA;;AACA;;;AAGH,iBATD,MASO;AACH;AACAD,kBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIGC,gBAAAA,I,GAAO,IAAIT,IAAJ,CAASU,MAAM,CAACC,QAAhB,C,EACX;;;uBACuBF,IAAI,CAACG,WAAL,E;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAAEF;AAAV,iBAAd,E,CAIA;AACA;;;uBACwBJ,IAAI,CAACO,GAAL,CAASC,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AACNZ,gBAAAA,OAAO,CAACC,GAAR,CAAYW,SAAZ;AACMC,gBAAAA,W,GAAclB,UAAU,CAACmB,QAAX,CAAoBF,SAApB,C;AACpBZ,gBAAAA,OAAO,CAACC,GAAR,CAAYY,WAAZ;;AACA,oBAAGA,WAAH,EAAgB;AACNE,kBAAAA,GADM,GACApB,UAAU,CAACoB,GADX;AAENC,kBAAAA,OAFM,GAEIH,WAAW,CAACG,OAFhB;AAGNC,kBAAAA,QAHM,GAGK,IAAIf,IAAI,CAACO,GAAL,CAASS,QAAb,CAAsBH,GAAtB,EAA2BC,OAA3B,CAHL;AAIZhB,kBAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ;AACH;;;;;;;;;;;;;;;;;;AAGL,eAAYE,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTZ,MAAAA,OAAO,EAAE,EADA;AAETS,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAFe;AAMlB;;;;6BAEO;AACJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,gEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAqD,QAAA,KAAK,EAAE;AAACI,UAAAA,KAAK,EAAC;AAAP,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADJ,EAII;AAAI,QAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,mDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKD,KAAL,CAAWZ,OADhB,CADJ,CADJ,CAJJ,CADJ,CADJ;AAiBH;;;;EA1EahB,S;;AA6ElB,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\"; \r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBird from '../abis/Kryptobird.json'; \r\n\r\n\r\nclass App extends Component {\r\n\r\n    async componentDidMount() {\r\n        await this.loadWeb3();\r\n        await this.loadBlockchainData();\r\n    }\r\n    \r\n    async loadWeb3(){\r\n        // first up is to detect ethereum provider (metamask)\r\n        const provider = await detectEthereumProvider();\r\n\r\n        if(provider) {\r\n            console.log('ethereum wallet is connected')\r\n            // From now on, this should always be true:\r\n            // provider === window.ethereum\r\n\r\n            // Legacy providers may only have ethereum.sendAsync\r\n            /*const chainId = await provider.request({\r\n                method: 'eth_chainId'\r\n            })*/\r\n        } else {\r\n            // no ethereum provider \r\n            console.log('no ehtereum wallet detected')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        var web3 = new Web3(window.ethereum)\r\n        // const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        const accounts = await web3.getAccounts()\r\n        this.setState({account: accounts})\r\n\r\n       \r\n        \r\n        // get networkId\r\n        // const networkId = await window.ethereum.networkVersion\r\n        const networkId = await web3.eth.net.getId()\r\n        console.log(networkId)\r\n        const networkData = KryptoBird.networks[networkId]\r\n        console.log(networkData)\r\n        if(networkData) {\r\n            const abi = KryptoBird.abi; \r\n            const address = networkData.address; \r\n            const contract = new web3.eth.Contract(abi, address)\r\n            console.log(contract)\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            contract: ''\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n                    <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\" style={{color:'white'}}>\r\n                        Krypto Birdz NFTs (Non Fungible Tokens)\r\n                    </div>\r\n                    <ul className=\"navbar- nav px-3\">\r\n                        <li className=\"nacv-item text-nowrap d-none d-sm-none d-sm-block\">\r\n                            <small className=\"text-white\">\r\n                                {this.state.account}\r\n                            </small>\r\n                        </li>\r\n\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}