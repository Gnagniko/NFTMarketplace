{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/Kryptobird.json';\nimport MetaMaskOnboarding from '@metamask/onboarding';\nimport './App.css';\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from 'mdb-react-ui-kit';\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // first up is to detect ethereum provider (metamask)\n                if (window.ethereum) {\n                  window.web3 = new Web3(window.ethereum);\n                } else {\n                  console.log(\"could not connect to metamask\");\n                }\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() // Metamask connection\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var onboarding, onboardButton, web3, networkId, networkData, abi, address, contract, totalSupply, i, _KryptoBird, kryptoMonsDescr, kryptoMonsOwner, kryptoMonsName, accounts;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                onboarding = new MetaMaskOnboarding();\n                onboardButton = document.getElementById(\"connectWallet\");\n\n                if (!MetaMaskOnboarding.isMetaMaskInstalled()) {\n                  onboardButton.innerText = \"Install MetaMask!\";\n\n                  onboardButton.onclick = function () {\n                    onboardButton.innerText = \"Connecting...\";\n                    onboardButton.disabled = true;\n                    onboarding.startOnboarding();\n                  };\n                }\n\n                if (!window.ethereum) {\n                  _context3.next = 48;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                web3 = window.web3; // get networkId\n\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 42;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                }); // call the total supply of our Krypto Birdz\n\n                _context3.next = 17;\n                return contract.methods.totalSupply().call();\n\n              case 17:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                }); // set up an array to keep track of tokens\n\n                i = 1;\n\n              case 20:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 40;\n                  break;\n                }\n\n                _context3.next = 23;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 23:\n                _KryptoBird = _context3.sent;\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [_KryptoBird])\n                }); // get nfts descriptions\n\n                _context3.next = 27;\n                return contract.methods.kryptoMonsDecription(i - 1).call();\n\n              case 27:\n                kryptoMonsDescr = _context3.sent;\n                this.setState({\n                  kryptoMonsDescrs: [].concat(_toConsumableArray(this.state.kryptoMonsDescrs), [kryptoMonsDescr])\n                }); // get nfts owner\n\n                _context3.next = 31;\n                return contract.methods.ownerOf(i - 1).call();\n\n              case 31:\n                kryptoMonsOwner = _context3.sent;\n                this.setState({\n                  kryptoMonsOwners: [].concat(_toConsumableArray(this.state.kryptoMonsOwners), [\"...\" + kryptoMonsOwner.slice(33, 42)])\n                }); // get nfts name\n\n                _context3.next = 35;\n                return contract.methods.kryptoMonsName(i - 1).call();\n\n              case 35:\n                kryptoMonsName = _context3.sent;\n                this.setState({\n                  kryptoMonsNames: [].concat(_toConsumableArray(this.state.kryptoMonsNames), [kryptoMonsName])\n                });\n\n              case 37:\n                i++;\n                _context3.next = 20;\n                break;\n\n              case 40:\n                _context3.next = 43;\n                break;\n\n              case 42:\n                window.alert('Smart contract not deployed');\n\n              case 43:\n                _context3.next = 45;\n                return window.ethereum.request({\n                  method: 'eth_requestAccounts'\n                });\n\n              case 45:\n                accounts = _context3.sent;\n                onboardButton.innerText = \"...\" + accounts[0].slice(33, 42);\n                this.setState({\n                  account: accounts[0]\n                });\n\n              case 48:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this, props));\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: [],\n      kryptoMonsDescrs: [],\n      kryptoMonsOwners: [],\n      kryptoMonsNames: []\n    };\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        class: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"The KryptoMons NFT Project is a decentralized application, that allows you to create and launch your own NFTs.\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        class: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, this.state.kryptoBirdz.map(function (kryptoBird, key) {\n        return React.createElement(\"div\", {\n          class: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(MDBCard, {\n          className: \"token img\",\n          style: {\n            maxWidth: '22rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, React.createElement(MDBCardImage, {\n          src: kryptoBird,\n          position: \"top\",\n          heigh: \"250rem\",\n          style: {\n            marginRight: '4px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }), React.createElement(MDBCardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(MDBCardTitle, {\n          class: \"card_title\",\n          tag: \"h3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, \" \", _this2.state.kryptoMonsNames[key], \" \"), React.createElement(\"form\", {\n          class: \"form-inline\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(MDBCardText, {\n          class: \"action_btn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \"Created by: \"), React.createElement(MDBCardText, {\n          class: \"action_btn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, _this2.state.kryptoMonsOwners[key], \" \")), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }), React.createElement(MDBCardText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \" \", _this2.state.kryptoMonsDescrs[key], \" \"), React.createElement(\"form\", {\n          class: \"form-inline\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(MDBBtn, {\n          href: kryptoBird,\n          class: \"action_btn \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, \"Download\"), React.createElement(MDBBtn, {\n          href: kryptoBird,\n          class: \"action_btn \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, \"Buy\")))));\n      })));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport default Home;","map":{"version":3,"sources":["C:\\Users\\Tino\\Desktop\\workspace\\projects\\NFTMarketplace\\src\\components\\Home.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","MetaMaskOnboarding","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardImage","MDBBtn","Home","loadWeb3","loadBlockchainData","window","ethereum","web3","console","log","onboarding","onboardButton","document","getElementById","isMetaMaskInstalled","innerText","onclick","disabled","startOnboarding","eth","net","getId","networkId","networkData","networks","abi","address","contract","Contract","setState","methods","totalSupply","call","i","kryptoBirdz","state","kryptoMonsDecription","kryptoMonsDescr","kryptoMonsDescrs","ownerOf","kryptoMonsOwner","kryptoMonsOwners","slice","kryptoMonsName","kryptoMonsNames","alert","request","method","accounts","account","props","color","map","kryptoBird","key","maxWidth","marginRight"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"; \r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBird from '../abis/Kryptobird.json'; \r\n\r\nimport MetaMaskOnboarding from '@metamask/onboarding'\r\nimport './App.css';\r\nimport {MDBCard, MDBCardBody, MDBCardTitle, \r\n    MDBCardText, MDBCardImage,MDBBtn} from 'mdb-react-ui-kit';\r\n\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    async componentDidMount() {\r\n        await this.loadWeb3();\r\n        await this.loadBlockchainData();\r\n    }\r\n    \r\n    async loadWeb3(){\r\n        // first up is to detect ethereum provider (metamask)\r\n\r\n          if (window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum);\r\n          } else {\r\n              console.log(\"could not connect to metamask\")\r\n          }\r\n    }\r\n\r\n    // Metamask connection\r\n    async loadBlockchainData() {\r\n        const onboarding = new MetaMaskOnboarding();\r\n        const onboardButton = document.getElementById(\"connectWallet\");\r\n\r\n        if (!MetaMaskOnboarding.isMetaMaskInstalled()) {\r\n            onboardButton.innerText = \"Install MetaMask!\";\r\n            onboardButton.onclick = () => {\r\n            onboardButton.innerText = \"Connecting...\";\r\n            onboardButton.disabled = true;\r\n            onboarding.startOnboarding();\r\n            }\r\n        }\r\n\r\n        if (window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum);\r\n\r\n            const web3 = window.web3\r\n\r\n            // get networkId\r\n            const networkId = await web3.eth.net.getId()\r\n            const networkData = KryptoBird.networks[networkId]\r\n            if(networkData) {\r\n                const abi = KryptoBird.abi; \r\n                const address = networkData.address; \r\n                const contract = new web3.eth.Contract(abi, address)\r\n                this.setState({contract})\r\n\r\n                // call the total supply of our Krypto Birdz\r\n                const totalSupply = await contract.methods.totalSupply().call()\r\n                this.setState({totalSupply}) \r\n\r\n                // set up an array to keep track of tokens\r\n                for(let i = 1; i <= totalSupply; i++) {\r\n                    // get nfts url\r\n                    const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\r\n                    this.setState({\r\n                        kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n                    })\r\n\r\n                    // get nfts descriptions\r\n                    const kryptoMonsDescr = await contract.methods.kryptoMonsDecription(i - 1).call()\r\n                    this.setState({\r\n                        kryptoMonsDescrs:[...this.state.kryptoMonsDescrs, kryptoMonsDescr]\r\n                    })\r\n\r\n                    // get nfts owner\r\n                    const kryptoMonsOwner = await contract.methods.ownerOf(i - 1).call()\r\n                    this.setState({\r\n                        kryptoMonsOwners:[...this.state.kryptoMonsOwners, \"...\"+kryptoMonsOwner.slice(33,42)]\r\n                    })\r\n\r\n                    // get nfts name\r\n                    const kryptoMonsName = await contract.methods.kryptoMonsName(i - 1).call()\r\n                    this.setState({\r\n                        kryptoMonsNames:[...this.state.kryptoMonsNames, kryptoMonsName]\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                window.alert('Smart contract not deployed')\r\n            }\r\n\r\n            // connect to metamask\r\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n\r\n            onboardButton.innerText = \"...\" + accounts[0].slice(33,42);\r\n            this.setState({account: accounts[0]})\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            contract: null,\r\n            totalSupply:0,\r\n            kryptoBirdz:[],\r\n            kryptoMonsDescrs:[],\r\n            kryptoMonsOwners:[],\r\n            kryptoMonsNames:[]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div class=\"container\">\r\n                <p style={{color:'white'}}>The KryptoMons NFT Project is a decentralized application, that allows you to create and launch your own NFTs.\r\n                            </p>\r\n                            <hr></hr>\r\n                         <div class=\"row\">\r\n                            \r\n                            {this.state.kryptoBirdz.map((kryptoBird, key) => {\r\n                                return(\r\n                                        <div class=\"row\">\r\n                                            <MDBCard className=\"token img\" style={{maxWidth:'22rem'}}>\r\n                                                <MDBCardImage src={kryptoBird} position='top' heigh='250rem' style={{marginRight:'4px'}} />\r\n                                                    <MDBCardBody>\r\n                                                                    \r\n                                                        <MDBCardTitle class=\"card_title\" tag=\"h3\"> {this.state.kryptoMonsNames[key]} </MDBCardTitle>\r\n                                                        <form class=\"form-inline\">\r\n                                                            <MDBCardText class=\"action_btn\">Created by: </MDBCardText>\r\n                                    \r\n                                                            <MDBCardText class=\"action_btn\">{this.state.kryptoMonsOwners[key]} </MDBCardText>\r\n                                                        </form>\r\n                                                        <hr></hr>\r\n                                                        <MDBCardText> {this.state.kryptoMonsDescrs[key]} </MDBCardText>\r\n                                                                        \r\n                                                        <form class=\"form-inline\">\r\n                                                            <MDBBtn href={kryptoBird} class=\"action_btn \">Download</MDBBtn>\r\n                                                            <MDBBtn href={kryptoBird} class=\"action_btn \">Buy</MDBBtn>\r\n                                                        </form>\r\n                                                                        \r\n                                                    </MDBCardBody>\r\n                                            </MDBCard>\r\n                                            </div>\r\n                                    )\r\n                                })}\r\n                                                \r\n                        </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}