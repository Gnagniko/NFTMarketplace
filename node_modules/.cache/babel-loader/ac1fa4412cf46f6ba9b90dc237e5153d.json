{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\nft-marketplace-starter-kit\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\"; //import KryptoBird from '../abis/Kryptobird.json'; \n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first up is to detect ethereum provider (metamask)\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider, web3, accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (!provider) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                console.log('ethereum wallet is connected');\n                web3 = new Web3(provider);\n                _context2.next = 8;\n                return ethereum.request({\n                  method: 'eth_accounts'\n                });\n\n              case 8:\n                accounts = _context2.sent;\n                console.log(accounts);\n                _context2.next = 13;\n                break;\n\n              case 12:\n                // no ethereum provider \n                console.log('no ehtereum wallet detected');\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"NFT Marketplace\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Tino\\Desktop\\workspace\\nft-marketplace-starter-kit\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","App","loadWeb3","loadBlockchainData","provider","console","log","web3","ethereum","request","method","accounts"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC,C,CACA;;IAGMC,G;;;;;;;;;;;;;;;;;;;;;;uBAGQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;QAEV;;;;;;;;;;;;;;uBAE2BH,sBAAsB,E;;;AAAvCI,gBAAAA,Q;;qBAMHA,Q;;;;;AACCC,gBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAEMC,gBAAAA,I,GAAO,IAAIR,IAAJ,CAASK,QAAT,C;;uBACUI,QAAQ,CAACC,OAAT,CAAiB;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAAjB,C;;;AAAjBC,gBAAAA,Q;AACNN,gBAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;;;;;AAEA;AACAN,gBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAQA;AACJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,CADJ;AAKH;;;;EApCaR,S;;AAuClB,eAAeG,GAAf","sourcesContent":["import React, { Component } from \"react\"; \r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\n//import KryptoBird from '../abis/Kryptobird.json'; \r\n\r\n\r\nclass App extends Component {\r\n\r\n    async componentDidMount() {\r\n        await this.loadWeb3();\r\n        await this.loadBlockchainData();\r\n    }\r\n    // first up is to detect ethereum provider (metamask)\r\n    async loadWeb3(){\r\n        const provider = await detectEthereumProvider();\r\n\r\n        // modern browers \r\n        // if there is a provider then\r\n        // lets log that it's working and access the window from the doc\r\n        // to set Web3 to the provider \r\n        if(provider) {\r\n            console.log('ethereum wallet is connected')\r\n\r\n            const web3 = new Web3(provider)\r\n            const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n            console.log(accounts)\r\n        } else {\r\n            // no ethereum provider \r\n            console.log('no ehtereum wallet detected')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n     \r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1>NFT Marketplace</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}