{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tino\\\\Desktop\\\\workspace\\\\projects\\\\NFTMarketplace\\\\src\\\\components\\\\Create.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/Kryptobird.json';\nimport './App.css';\nimport MetaMaskOnboarding from '@metamask/onboarding';\nimport './App.css';\n\nvar Create =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Create, _Component);\n\n  _createClass(Create, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // first up is to detect ethereum provider (metamask)\n                if (window.ethereum) {\n                  window.web3 = new Web3(window.ethereum);\n                } else {\n                  console.log(\"could not connect to metamask\");\n                }\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() // Metamask connection\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var onboarding, onboardButton, web3, networkId, networkData, abi, address, contract, totalSupply, i, _KryptoBird, kryptoMonsDescr, kryptoMonsOwner, kryptoMonsName, accounts;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                onboarding = new MetaMaskOnboarding();\n                onboardButton = document.getElementById(\"connectWallet\");\n\n                if (!MetaMaskOnboarding.isMetaMaskInstalled()) {\n                  onboardButton.innerText = \"Install MetaMask!\";\n\n                  onboardButton.onclick = function () {\n                    onboardButton.innerText = \"Connecting...\";\n                    onboardButton.disabled = true;\n                    onboarding.startOnboarding();\n                  };\n                }\n\n                if (!window.ethereum) {\n                  _context3.next = 48;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                web3 = window.web3; // get networkId\n\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 42;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                }); // call the total supply of our Krypto Birdz\n\n                _context3.next = 17;\n                return contract.methods.totalSupply().call();\n\n              case 17:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                }); // set up an array to keep track of tokens\n\n                i = 1;\n\n              case 20:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 40;\n                  break;\n                }\n\n                _context3.next = 23;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 23:\n                _KryptoBird = _context3.sent;\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [_KryptoBird])\n                }); // get nfts descriptions\n\n                _context3.next = 27;\n                return contract.methods.kryptoMonsDecription(i - 1).call();\n\n              case 27:\n                kryptoMonsDescr = _context3.sent;\n                this.setState({\n                  kryptoMonsDescrs: [].concat(_toConsumableArray(this.state.kryptoMonsDescrs), [kryptoMonsDescr])\n                }); // get nfts owner\n\n                _context3.next = 31;\n                return contract.methods.ownerOf(i - 1).call();\n\n              case 31:\n                kryptoMonsOwner = _context3.sent;\n                this.setState({\n                  kryptoMonsOwners: [].concat(_toConsumableArray(this.state.kryptoMonsOwners), [\"...\" + kryptoMonsOwner.slice(33, 42)])\n                }); // get nfts name\n\n                _context3.next = 35;\n                return contract.methods.kryptoMonsName(i - 1).call();\n\n              case 35:\n                kryptoMonsName = _context3.sent;\n                this.setState({\n                  kryptoMonsNames: [].concat(_toConsumableArray(this.state.kryptoMonsNames), [kryptoMonsName])\n                });\n\n              case 37:\n                i++;\n                _context3.next = 20;\n                break;\n\n              case 40:\n                _context3.next = 43;\n                break;\n\n              case 42:\n                window.alert('Smart contract not deployed');\n\n              case 43:\n                _context3.next = 45;\n                return window.ethereum.request({\n                  method: 'eth_requestAccounts'\n                });\n\n              case 45:\n                accounts = _context3.sent;\n                onboardButton.innerText = \"...\" + accounts[0].slice(33, 42);\n                this.setState({\n                  account: accounts[0]\n                });\n\n              case 48:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function Create(props) {\n    var _this;\n\n    _classCallCheck(this, Create);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Create).call(this, props));\n\n    _this.mint = function (kryptoBird, kryptoMonsDecr, krytoMonName) {\n      if (_this.state.account !== '') {\n        _this.state.contract.methods.mint(kryptoBird, kryptoMonsDecr, krytoMonName).send({\n          from: _this.state.account\n        }).once('receipt', function (receipt) {\n          _this.setState({\n            kryptoBirdz: [].concat(_toConsumableArray(_this.state.kryptoBirdz), [kryptoBird])\n          });\n\n          _this.setState({\n            kryptoMonsDescrs: [].concat(_toConsumableArray(_this.state.kryptoMonsDescrs), [kryptoMonsDecr])\n          });\n\n          _this.setState({\n            kryptoMonsNames: [].concat(_toConsumableArray(_this.state.kryptoMonsNames), [krytoMonName])\n          });\n        });\n      }\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: [],\n      kryptoMonsDescrs: [],\n      kryptoMonsOwners: [],\n      kryptoMonsNames: []\n    };\n    return _this;\n  }\n\n  _createClass(Create, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"kryptoMons - NFT Marketplace\"), React.createElement(\"p\", {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \" Here you can mint your NFTs to the Blockchain.\"), React.createElement(\"p\", {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Please fill the following fields to mint your NFTs\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var kryptoBird = _this2.kryptoBird.value;\n          var kryptoMonDecr = _this2.kryptoMonDecr.value;\n          var kryptoMonName = _this2.kryptoMonName.value;\n\n          _this2.mint(kryptoBird, kryptoMonDecr, kryptoMonName);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Add a file location\",\n        className: \"form-control mb-1\",\n        ref: function ref(input) {\n          return _this2.kryptoBird = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Add NFT name\",\n        className: \"form-control mb-1\",\n        ref: function ref(input) {\n          return _this2.kryptoMonName = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"textarea\", {\n        type: \"text\",\n        placeholder: \"Add NFT description\",\n        className: \"form-control mb-1\",\n        ref: function ref(input) {\n          return _this2.kryptoMonDecr = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        style: {\n          margin: '6px'\n        },\n        type: \"submit\",\n        className: \"btn btn-primary btn-black\",\n        value: \"MINT\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Create;\n}(Component);\n\nexport default Create;","map":{"version":3,"sources":["C:\\Users\\Tino\\Desktop\\workspace\\projects\\NFTMarketplace\\src\\components\\Create.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","MetaMaskOnboarding","Create","loadWeb3","loadBlockchainData","window","ethereum","web3","console","log","onboarding","onboardButton","document","getElementById","isMetaMaskInstalled","innerText","onclick","disabled","startOnboarding","eth","net","getId","networkId","networkData","networks","abi","address","contract","Contract","setState","methods","totalSupply","call","i","kryptoBirdz","state","kryptoMonsDecription","kryptoMonsDescr","kryptoMonsDescrs","ownerOf","kryptoMonsOwner","kryptoMonsOwners","slice","kryptoMonsName","kryptoMonsNames","alert","request","method","accounts","account","props","mint","kryptoBird","kryptoMonsDecr","krytoMonName","send","from","once","receipt","opacity","color","event","preventDefault","value","kryptoMonDecr","kryptoMonName","input","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"; \r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBird from '../abis/Kryptobird.json'; \r\nimport './App.css';\r\nimport MetaMaskOnboarding from '@metamask/onboarding'\r\nimport './App.css';\r\n\r\n\r\n    class Create extends Component {\r\n\r\n        async componentDidMount() {\r\n            await this.loadWeb3();\r\n            await this.loadBlockchainData();\r\n        }\r\n        \r\n        async loadWeb3(){\r\n            // first up is to detect ethereum provider (metamask)\r\n    \r\n              if (window.ethereum) {\r\n                window.web3 = new Web3(window.ethereum);\r\n              } else {\r\n                  console.log(\"could not connect to metamask\")\r\n              }\r\n        }\r\n    \r\n        // Metamask connection\r\n        async loadBlockchainData() {\r\n            const onboarding = new MetaMaskOnboarding();\r\n            const onboardButton = document.getElementById(\"connectWallet\");\r\n    \r\n            if (!MetaMaskOnboarding.isMetaMaskInstalled()) {\r\n                onboardButton.innerText = \"Install MetaMask!\";\r\n                onboardButton.onclick = () => {\r\n                onboardButton.innerText = \"Connecting...\";\r\n                onboardButton.disabled = true;\r\n                onboarding.startOnboarding();\r\n                }\r\n            }\r\n    \r\n            if (window.ethereum) {\r\n                window.web3 = new Web3(window.ethereum);\r\n    \r\n                const web3 = window.web3\r\n    \r\n                // get networkId\r\n                const networkId = await web3.eth.net.getId()\r\n                const networkData = KryptoBird.networks[networkId]\r\n                if(networkData) {\r\n                    const abi = KryptoBird.abi; \r\n                    const address = networkData.address; \r\n                    const contract = new web3.eth.Contract(abi, address)\r\n                    this.setState({contract})\r\n    \r\n                    // call the total supply of our Krypto Birdz\r\n                    const totalSupply = await contract.methods.totalSupply().call()\r\n                    this.setState({totalSupply}) \r\n    \r\n                    // set up an array to keep track of tokens\r\n                    for(let i = 1; i <= totalSupply; i++) {\r\n                        // get nfts url\r\n                        const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\r\n                        this.setState({\r\n                            kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n                        })\r\n    \r\n                        // get nfts descriptions\r\n                        const kryptoMonsDescr = await contract.methods.kryptoMonsDecription(i - 1).call()\r\n                        this.setState({\r\n                            kryptoMonsDescrs:[...this.state.kryptoMonsDescrs, kryptoMonsDescr]\r\n                        })\r\n    \r\n                        // get nfts owner\r\n                        const kryptoMonsOwner = await contract.methods.ownerOf(i - 1).call()\r\n                        this.setState({\r\n                            kryptoMonsOwners:[...this.state.kryptoMonsOwners, \"...\"+kryptoMonsOwner.slice(33,42)]\r\n                        })\r\n    \r\n                        // get nfts name\r\n                        const kryptoMonsName = await contract.methods.kryptoMonsName(i - 1).call()\r\n                        this.setState({\r\n                            kryptoMonsNames:[...this.state.kryptoMonsNames, kryptoMonsName]\r\n                        })\r\n                    }\r\n    \r\n                } else {\r\n                    window.alert('Smart contract not deployed')\r\n                }\r\n    \r\n                // connect to metamask\r\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    \r\n                onboardButton.innerText = \"...\" + accounts[0].slice(33,42);\r\n                this.setState({account: accounts[0]})\r\n            }\r\n        }\r\n    \r\n        mint = (kryptoBird, kryptoMonsDecr, krytoMonName) => {\r\n    \r\n            if(this.state.account !== ''){\r\n                this.state.contract.methods.mint(kryptoBird, kryptoMonsDecr, krytoMonName).send({from:this.state.account})\r\n                    .once('receipt', (receipt) => {\r\n                this.setState({\r\n                    kryptoBirdz:[...this.state.kryptoBirdz, kryptoBird]\r\n                })\r\n                this.setState({\r\n                    kryptoMonsDescrs:[...this.state.kryptoMonsDescrs, kryptoMonsDecr]\r\n                })\r\n                this.setState({\r\n                    kryptoMonsNames:[...this.state.kryptoMonsNames, krytoMonName]\r\n                })\r\n             })\r\n            }\r\n    \r\n        }\r\n    \r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                account: '',\r\n                contract: null,\r\n                totalSupply:0,\r\n                kryptoBirdz:[],\r\n                kryptoMonsDescrs:[],\r\n                kryptoMonsOwners:[],\r\n                kryptoMonsNames:[]\r\n            }\r\n        }\r\n\r\n        render (){\r\n            return (\r\n                    <div className='row'>\r\n                        \r\n                        <main role='main' className=\"col-lg-12 d-flex text-center\">\r\n                            <div className='content mr-auto ml-auto' style={{opacity:'0.8'}}>\r\n                                <hr></hr>\r\n                                <hr></hr>\r\n                                <h1 style={{color:'white'}}>\r\n                                    kryptoMons - NFT Marketplace\r\n                                </h1>\r\n                                <p style={{color:'white'}}> Here you can mint your NFTs to the Blockchain.\r\n                                </p>\r\n                                <p style={{color:'white'}}>\r\n                                 Please fill the following fields to mint your NFTs \r\n                                </p>\r\n\r\n                                <form onSubmit={(event) => {\r\n                                    event.preventDefault()\r\n                                    const kryptoBird = this.kryptoBird.value\r\n                                    const kryptoMonDecr = this.kryptoMonDecr.value\r\n                                    const kryptoMonName = this.kryptoMonName.value\r\n                                    this.mint(kryptoBird, kryptoMonDecr, kryptoMonName)\r\n                                }}>\r\n                                    <input type='text' placeholder='Add a file location' className='form-control mb-1'\r\n                                    ref={(input) => this.kryptoBird = input}/>\r\n                                    <input type='text' placeholder='Add NFT name' className='form-control mb-1'\r\n                                    ref={(input) => this.kryptoMonName = input}/>\r\n                                    <textarea type='text' placeholder='Add NFT description' className='form-control mb-1'\r\n                                    ref={(input) => this.kryptoMonDecr = input}/>\r\n                                    <input style={{margin:'6px'}} type='submit' className='btn btn-primary btn-black' value='MINT' />\r\n                                </form>\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\nexport default Create"]},"metadata":{},"sourceType":"module"}